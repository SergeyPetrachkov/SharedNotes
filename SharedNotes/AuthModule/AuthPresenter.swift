//
//  AuthPresenter.swift
//  SharedNotes
//
//  Created by Sergey Petrachkov on 8/29/17.
//  Copyright (c) 2017 Sergey Petrachkov. All rights reserved.
//
//  This file was generated by the Actonica VIPER Xcode Templates so
//  you can apply VIPER architecture to your iOS projects.
//

import UIKit

protocol AuthPresenterInput {
  func submitForm(firstnameValue: String, lastnameValue: String)
}
protocol AuthPresenterOutput {
  func didChangeState(viewModel : Auth.Context.ViewModel)
}

class AuthPresenter: AuthPresenterInput {
  //MARK: - Essentials
  var view: UIViewController!
  var output : AuthPresenterOutput?
  var viewModel : Auth.Context.ViewModel? {
    didSet{
      guard let viewModel = self.viewModel else {
        return
        //or do something else like show placeholder
      }
      self.output?.didChangeState(viewModel: viewModel)
    }
  }
  let router : AuthRoutingLogic = AuthRouter()
  var interactor : AuthInteractorInput = AuthInteractor()
  //MARK: - Initializers
  fileprivate init() {
    
  }
  
  convenience init(view: UIViewController, output: AuthPresenterOutput) {
    self.init()
    self.view = view
    self.output = output
    self.interactor.output = self
  }
  
  // MARK: - Presenter Input
  func submitForm(firstnameValue: String, lastnameValue: String) {
    let userRequest = Auth.Context.Request(firstname: firstnameValue, lastname: lastnameValue)
    self.interactor.registerUser(userRequest: userRequest)
  }
}
extension AuthPresenter : AuthInteractorOutput {
  //MARK: - Interactor output
  func didRegister(user : Auth.Context.Response) {
    self.router.showRegisteredModule(from: self.view, for: user.user)
  }
  func didFail(with error: Error) {
    self.router.showError(from: self.view, with: error.localizedDescription)
  }
}
